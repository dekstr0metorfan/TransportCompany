import java.util.ArrayList;

/**
 * This abstract class is responsible for creating Train object
 * and managing transit method.
 * ExpressTrain and RegionalTrain classes inherit from this class.
 */
public abstract class Train
{
    /**
     * Capacity of the train
     */
    protected int capacity;
    /**
     * Speed of the train
     */
    protected int speed;
    /**
     * Cost per kilometer of travel
     */
    protected double cost;
    /**
     * Revenue per passenger per kilometer of travel
     */
    protected double revenue;
    /**
     * Starting station
     */
    protected Station start_station;
    /**
     * Finish station
     */
    protected Station finish_station;
    /**
     * Distance of the route
     */
    protected final double ROUTE_DISTANCE;
    /**
     * Number of transits of train per day
     */
    protected int number_of_transits;

    /**
     * Constructs Train object
     * @param start_station starting station
     * @param finish_station finish station
     */
    public Train(Station start_station, Station finish_station)
    {
        this.start_station = start_station;
        this.finish_station = finish_station;
        this.ROUTE_DISTANCE = Math.sqrt((finish_station.location[0] - start_station.location[0]) * (finish_station.location[0] - start_station.location[0]) + (finish_station.location[1] - start_station.location[1]) * (finish_station.location[1] - start_station.location[1]));
    }

    /**
     * This method calculates one day profit generated by single train
     * @param revenue_mod revenue modifier (provided by user)
     * @param cost_mod cost modifier (provided by user)
     * @return money earned (or lost) during one day
     */
    public double transit(double revenue_mod, double cost_mod)
    {
        int transit_passengers = 0;
        
        for (Passenger passenger : new ArrayList<>(start_station.passengers))
        {
            if (passenger.get_destination() == this.finish_station)
            {
                transit_passengers++;
                start_station.passengers.remove(passenger);
                
                if (transit_passengers == this.capacity)
                    break;
            }
        }
        
        if (this.number_of_transits % 2 != 0)
        {
            Station temp = this.start_station;
            this.start_station = this.finish_station;
            this.finish_station = temp;
        }
        
        return (((transit_passengers * this.revenue * revenue_mod) - (this.cost * cost_mod)) * this.ROUTE_DISTANCE) * this.number_of_transits;
    }
}
